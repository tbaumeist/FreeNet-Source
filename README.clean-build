These are instructions on how to rebuild Freenet completely from source.

It is difficult for everyone to build all components, so the default Freenet
source package ships with some pre-compiled binaries. However, this means that
users need to trust that these binaries haven't been compromised.

For the paranoid, we offer the option of building these binaries yourself, so
that this extra trust is not necessary[1]. Unfortunately, this involves more
effort than the default build path; help in easing this would be appreciated.

== Considerations ==

(Properties can be set in override.properties, similar to build.properties)

A. The build scripts need to know where the contrib repo is. By default, they
look in ../contrib; you can override this by setting `contrib.dir`.

B. You may need to install extra Java libraries. These are listed in build.xml,
in the <path> elements. If you already have these installed, but ANT can't find
them, you can try setting the "java.class.dirs.user" property.

B.1. If you're doing a clean-build for security reasons, then you'll want to
clean-build these libraries too. Google's source package for GWT actually uses
many binary components during the build process, which makes a clean-build next
to impossible; however (e.g.) Debian's GWT source package[2] is pure source.

B.2. It's also a good idea to make sure you received the source code correctly.
Most modern package managers (e.g. APT) have signature verification, or you can
try HTTPS (e.g. logged in on googlecode).

C. There is a good deal of native code in freenet-ext.jar that won't be rebuilt
by our automatic build-scripts. You'll need to do this manually; they are: fec,
NativeBigInteger, NativeThread, win_wrapper and wrapper. This is probably the
most tedious step and needs to be done *before* the below command.

== Clean-building ==

The pre-compiled components are freenet-ext.jar (ext) and the GWT-generated
javascript (gjs). The former is a separate package ("contrib"), whereas the
latter is strictly contained within this package.

To use the build scripts, you need to install ant. To compile all of the above
completely from source, the recommended method is to use build-clean.xml:

$ ... # retrieve and build external packages (e.g. contrib)
$ ... # set build properties
$ ant -f build-clean.xml dist

NOTE: the default checkout of this package contains some pre-built javascript;
running `dist` will remove it and re-build it from source. You can also remove
it separately by running the `clean-gjs` target.

(It is possible to use build.xml to do the above in fewer steps, but it needs
extra libraries - ant-optional, and (if Java 5) bsf[3] and rhino[4]. Also, it
won't abort immediately if building a component fails; it'll first try to
retrieve pre-built blobs of that component. This may not be what you want.)

[1] However, you still need to trust your compiler and operating system; see
Ken Thompson's "Reflections on Trusting Trust".
[2] http://packages.debian.org/source/sid/gwt
[3] http://www.mozilla.org/rhino/
[4] http://jakarta.apache.org/bsf/ On Debian, bug #601685 prevents libbsf-java
from working with rhino, but fix (provided in the report) is fairly simple.
